<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:UpDownCtrls"
                    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.aero"
                    x:Name="MyArrowButton">
    <local:IsCornerCtrlCornerToRadiusConverter x:Key="IsCornerCtrlCornerToRadiusConverter"/>
    <local:ThicknessToMarginConverter x:Key="ThicknessToMarginConverter" />
    <LinearGradientBrush x:Key="HighlightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#E8F5FD" Offset="0.0"/>
                <GradientStop Color="#AADAF6" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#C2E4F6" Offset="0.1"/>
                <GradientStop Color="#91CCEB" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style TargetType="{x:Type local:ArrowRepeatButton}">
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ArrowRepeatButton}">
                    <Grid Margin="0,0,0,0">
                        <Border x:Name="Border" BorderThickness="1"
                            CornerRadius="{Binding IsCornerCtrlCorner, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ArrowRepeatButton}}, Converter={StaticResource IsCornerCtrlCornerToRadiusConverter}, ConverterParameter=0x2}">
                            <Border x:Name="Shadow" BorderBrush="#88FFFFFF" BorderThickness="1,1,1,1"
                                CornerRadius="{Binding IsCornerCtrlCorner, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:ArrowRepeatButton}}, Converter={StaticResource IsCornerCtrlCornerToRadiusConverter}, ConverterParameter=0x2}"/>
                        </Border>
                        <!-- Trouble with Microsoft_Windows_Themes:ButtonChrome is that it has a single property 'RoundCorners',
                        which is either True or False. When set to False, left hand side of button is right angled, while right
                        hand side is slightly rounded. We want to be able to choose which corner is rounded and which is not.
                            <Microsoft_Windows_Themes:ButtonChrome x:Name="Chrome" SnapsToDevicePixels="False" ClipToBounds="True"
                                                               HorizontalAlignment="Stretch" 
                                                               RenderMouseOver="{TemplateBinding IsMouseOver}" 
                                                               RenderPressed="{TemplateBinding IsPressed}"
                                                               RoundCorners="False"/>-->
                        <Path Name="Arrow" Fill="Black" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="-1,2,0,0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="RepeatButton.IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#3C7FB1"/>
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightBrush}"/>
                        </Trigger>
                        <Trigger Property="RepeatButton.IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#2C628B" />
                            <Setter TargetName="Shadow" Property="BorderThickness" Value="1,1,0,0" />
                            <Setter TargetName="Shadow" Property="BorderBrush" Value="#44000000" />
                        </Trigger>
                        <Trigger Property="RepeatButton.IsEnabled" Value="False">
                            <Setter TargetName="Shadow" Property="BorderThickness" Value="0" />
                            <Setter TargetName="Border" Property="Background" Value="#F4F4F4" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#00000000" />
                            <Setter TargetName="Arrow" Property="Fill" Value="#AFAFAF" />
                        </Trigger> 
                        <Trigger Property="ButtonArrowType" Value="Down">
                            <Setter TargetName="Arrow" Property="Data" Value="M 0 0 L 3.5 4 L 7 0 Z" />
                        </Trigger>
                        <Trigger Property="ButtonArrowType" Value="Up">
                            <Setter TargetName="Arrow" Property="Data" Value="M 0 2 L 3.5 -2 L 7 2 Z" />
                        </Trigger>
                        <Trigger Property="ButtonArrowType" Value="Left">
                            <Setter TargetName="Arrow" Property="Data" Value="M 0 0 L 4 3.5 L 4 -3.5 Z" />
                        </Trigger>
                        <Trigger Property="ButtonArrowType" Value="Right">
                            <Setter TargetName="Arrow" Property="Data" Value="M 0 3.5 L 4 0 L 0 -3.5 Z" />
                        </Trigger>                     
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
 <!-- Other theme specific values here (that is, that are not used by RepeatArrowBotton) -->
    <Style x:Key="UpDownButtonsStyle" TargetType="{x:Type local:UpDownButtons}">
        <Setter Property="Margin" Value="0,0,0,0"/>
    </Style>
    <Style x:Key="TimeCtrlsGridStyle" TargetType="{x:Type Grid}">
        <Setter Property="Margin" Value="{Binding ElementName=TextBoxCtrl, 
                                Path=BorderThickness,
                                Converter={StaticResource ThicknessToMarginConverter},
                                ConverterParameter=false}"/>
     </Style>
</ResourceDictionary>